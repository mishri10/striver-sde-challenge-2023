//Brute force: find all the possible buy and sell, and keep maintaing max profit during this
//T.C:O(N^2)//S.C: O(1)

//Code:

int maxProfit(vector<int> &arr) {
    int maxPro = 0;
    int n = arr.size();

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[j] > arr[i]) {
            maxPro = max(arr[j] - arr[i], maxPro);
            }
        }
        }

    return maxPro;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------
//Optimal Approach: 
intial keep buy as INT_MAX and keep updating buy value if we encounter something smaller than current buy; and simultaneously keep calculating profit as well which will be
max of the ((current element-value of buy),profit)
//T.C:O(n)//S.C:O(1)


Code:
#include <bits/stdc++.h> 
int maximumProfit(vector<int> &prices){
    int buy=INT_MAX;int profit=0;
    for (auto i:prices) {
        buy=min(i,buy);
        profit=max(profit,i-buy);
    }
    return profit;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
