// Brute force: will sort the intervals so that related intervals comes closer and secondly for each interval, 
i will check the next interval till it can be merged (start of interval<= end of the intial interval ); so 2 for loops will be used for the same
and will not check for intervals which are already in ans vector

Code:
vector<vector<int>> mergeIntervals(vector<vector<int>> &intervals)
{   vector<vector<int>>ans;
    sort(intervals.begin(),intervals.end());
   
    int n=intervals.size();
    for (int i = 0; i < n; i++){
        int start=intervals[i][0];
        int end=intervals[i][1];
        if(!ans.empty() and ans.back()[1]>=start)continue;
        for(int j=i+1;j<n;j++){
            if(intervals[j][0]<=end)end=max(end,intervals[j][1]);
            else break;
        }
        ans.push_back({start,end});
    }
      
    
    return ans;
}
Time Complexity: O(N*logN) + O(2*N), where N = the size of the given array.
Reason: Sorting the given array takes  O(N*logN) time complexity. Now, after that, we are using 2 loops i and j. But while using loop i, we skip all 
the intervals that are merged with loop j. So, we can conclude that every interval is roughly visited twice(roughly, once for checking or skipping and once for merging). 
So, the time complexity will be 2*N instead of N2.

Space Complexity: O(N), as we are using an answer list to store the merged intervals. Except for the answer array, we are not using any extra space.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------



// optimal approach

Since we have sorted the intervals, the intervals which will be merging are bound to be adjacent.
We kept on merging simultaneously as we were traversing through the array and when the element was non-overlapping we simply inserted the element in our answer list.

Code:

vector<vector<int>> mergeIntervals(vector<vector<int>> &intervals)
{   vector<vector<int>>ans;
    sort(intervals.begin(),intervals.end());
    vector<int>last=intervals[0];
    int n=intervals.size();
    for (int i = 1; i < n; i++) {
      if (intervals[i][0] <= last[1]) 
          last[1]=max(intervals[i][1],last[1]);
      else {
          ans.push_back(last);
          last=intervals[i];
      }
    }
    ans.push_back(last);
    return ans;
}

Time Complexity: O(N*logN) + O(N), where N = the size of the given array.
Reason: Sorting the given array takes  O(N*logN) time complexity. Now, after that, we are just using a single loop that runs for N times. 
So, the time complexity will be O(N).

Space Complexity: O(N), as we are using an answer list to store the merged intervals. Except for the answer array, we are not using any extra space.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
