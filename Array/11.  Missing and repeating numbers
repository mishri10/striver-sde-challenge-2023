// ask interviewer if array can be sorted: if yes
then 
1st approach: sort the array+ linearly traverse to find duplicate and missing element
//T.C: O(N), S.C:O(1)
------------------------------------------------------------------------------------------------------------------------------------------------------
// frequency array;
//T.C:O(2N),//S.C:O(N)
---------------------------------------------------------------------------------------------------------------------------------------------------
// mathematical approach to find 2 missing element using sum of number and sum of squares of number since there are 2 values that need to be found so 2  equation will be used
// T.C:O(N)//S.C:O(1)
Code:
    long long n = a.size(); // size of the array

    // Find Sn and S2n:
    long long SN = (n * (n + 1)) / 2;
    long long S2N = (n * (n + 1) * (2 * n + 1)) / 6;

    // Calculate S and S2:
    long long S = 0, S2 = 0;
    for (int i = 0; i < n; i++) {
        S += a[i];
        S2 += (long long)a[i] * (long long)a[i];
    }

    //S-Sn = X-Y:
    long long val1 = S - SN;

    // S2-S2n = X^2-Y^2:
    long long val2 = S2 - S2N;

    //Find X+Y = (X^2-Y^2)/(X-Y):
    val2 = val2 / val1;

    //Find X and Y: X = ((X+Y)+(X-Y))/2 and Y = X-(X-Y),
    // Here, X-Y = val1 and X+Y = val2:
    long long x = (val1 + val2) / 2;
    long long y = x - val1;

    return {(int)x, (int)y};
}
