Brute force:
1) to find all the posiible permutation of given number(using recursion)
2) iterate over the sorted array of permutation and find the given permutation
3) then just return the permutation next to it

T.C: O(N!*N) because there are N element and to find permuatation of n array it will take N!
s.c:O(1)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
** imp to say in interview
better Approach
1) show off u know STL: next_permuatation(arr.begin(),arr.end())

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Optimal solution
Algorithm / Intuition
The steps are the following:

Find the break-point, 
1: Break-point means the first index i from the back of the given array where arr[i] becomes smaller than arr[i+1].
For example, if the given array is {2,1,5,4,3,0,0}, the break-point will be index 1(0-based indexing). Here from the back of the array, index 1 is the first index where arr[1] i.e. 1 is smaller than arr[i+1] i.e. 5.
To find the break-point, using a loop we will traverse the array backward and store the index i where arr[i] is less than the value at index (i+1) i.e. arr[i+1].

If such a break-point does not exist i.e. if the array is sorted in decreasing order, the given permutation is the last one in the sorted order of all possible permutations. So, the next permutation must be the first i.e. the permutation in increasing order.
So, in this case, we will reverse the whole array and will return it as our answer.


If a break-point exists:
Find the smallest number i.e. > arr[i] and in the right half of index i(i.e. from index i+1 to n-1) and swap it with arr[i].
Reverse the entire right half(i.e. from index i+1 to n-1) of index i. And finally, return the array.




Time Complexity: O(3N), where N = size of the given array
Finding the break-point, finding the next greater element, and reversal at the end takes O(N) for each, where N is the number of elements in the input array. This sums up to 3*O(N) which is approximately O(3N).

Space Complexity: Since no extra storage is required. Thus, its space complexity is O(1).


Code:
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n=nums.size();
        int index=-1;
      for(int i=n-2;i>=0;--i){
          if(nums[i]<nums[i+1]){index=i;break;}
      }
        if(index==-1){reverse(nums.begin(),nums.end());
        return;}
       
      for(int i=n-1;i>index;i--){
          if(nums[i]>nums[index])
          {swap(nums[i],nums[index]);break;}
      }
        reverse(nums.begin()+index+1,nums.end());

    }
};
